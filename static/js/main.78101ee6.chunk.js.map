{"version":3,"sources":["serviceWorker.js","redux/store.js","redux/reducer.js","chat/msgs.js","chat/chat.js","index.js"],"names":["Boolean","window","location","hostname","match","store","reducer","initialState","state","listeners","getState","dispatch","action","forEach","l","subscribe","listener","push","createStore","type","messages","concat","message","filter","m","i","idx","MessagesInput","value","handleChange","target","setState","handleSubmit","ev","preventDefault","length","author","props","username","color","content","this","className","onSubmit","placeholder","onChange","Component","MessagesArea","handleDel","forceUpdate","map","key","onClick","MessagesGroup","user","theme","children","MessagesLog","storeState","src","name","collapsed","displayDataTypes","indentWidth","iconStyle","Chat","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gDCSC,IAAMC,EAtBN,SAAsBC,EAASC,GACpC,IAAIC,EAAQD,EACNE,EAAY,GAYlB,MAAO,CAELC,SAZe,kBAAMF,GAarBG,SAXe,SAAAC,GACfJ,EAAQF,EAAQE,EAAOI,GAEvBH,EAAUI,SAAQ,SAAAC,GAAC,OAAIA,QASvBC,UANgB,SAAAC,GAAQ,OAAIP,EAAUQ,KAAKD,KAU1BE,EC3Bd,SAAkBV,EAAOI,GAE9B,OAAQA,EAAOO,MACb,IAAK,cACH,MAAO,CACLC,SAAUZ,EAAMY,SAASC,OAAOT,EAAOU,UAE3C,IAAK,cACH,MAAO,CAAEF,SAAUZ,EAAMY,SAASG,QAAO,SAACC,EAAGC,GAAJ,OAAUb,EAAOc,MAAQD,MACpE,QACE,OAAOjB,KDiB6B,CAAEY,SAAU,KEvBhDO,E,4MACJnB,MAAQ,CAACoB,MAAO,I,EAEhBC,aAAe,YAA4B,IAAfD,EAAc,EAAxBE,OAAUF,MAC1B,EAAKG,SAAS,CAAEH,W,EAGlBI,aAAe,SAAAC,GACbA,EAAGC,iBACC,EAAK1B,MAAMoB,MAAMO,SACnB9B,EAAMM,SAAS,CACbQ,KAAM,cACNG,QAAS,CACPc,OAAQ,EAAKC,MAAMC,SACnBC,MAAO,EAAKF,MAAME,MAClBC,QAAS,EAAKhC,MAAMoB,SAGxB,EAAKG,SAAS,CAAEH,MAAO,O,uDAIhB,IAAD,EACoBa,KAAKJ,MAAzBC,EADA,EACAA,SAAUC,EADV,EACUA,MAClB,OACE,0BAAMG,UAAU,qCAAqCC,SAAUF,KAAKT,cAClE,2BAAOU,UAAU,YAAYJ,GAC7B,2BACEnB,KAAK,OAAOyB,YAAY,MACxBC,SAAUJ,KAAKZ,aAAcD,MAAOa,KAAKjC,MAAMoB,QAEjD,4BAAQT,KAAK,SAASuB,UAAW,kBAAoBH,GACnD,uBAAGG,UAAU,mD,GAhCKI,aAuCtBC,E,4MAKJC,UAAY,SAACvB,GACXpB,EAAMM,SAAS,CAAEQ,KAAM,cAAeO,IAAKD,K,kEALvB,IAAD,OACnBpB,EAAMU,WAAU,kBAAM,EAAKkC,mB,+BAOlB,IAAD,OACA7B,EAAaf,EAAMK,WAAnBU,SACR,OACE,oCACGA,EAAS8B,KAAI,SAAC1B,EAAGC,GAAJ,OACZ,yBAAKiB,UAAW,cAAgBlB,EAAEe,MAAOY,IAAK1B,GAC5C,uBAAGiB,UAAU,aAAaU,QAAS,kBAAM,EAAKJ,UAAUvB,MACxD,yBAAKiB,UAAU,UAAUlB,EAAEY,QAC3B,2BAAIZ,EAAEgB,kB,GAjBSM,aAyBrBO,E,uKACO,IAAD,EAC0BZ,KAAKJ,MAA/BiB,EADA,EACAA,KAAMC,EADN,EACMA,MAAOC,EADb,EACaA,SACrB,OACE,6BAASd,UAAU,uBACjB,4BAAKc,GACL,kBAAC,EAAD,CAAelB,SAAUgB,EAAMf,MAAOgB,IACtC,kBAAC,EAAD,W,GAPoBT,aAatBW,E,kLACkB,IAAD,OACnBpD,EAAMU,WAAU,kBAAM,EAAKkC,mB,+BAI3B,IAAMS,EAAarD,EAAMK,WACzB,OACE,kBAAC,IAAD,CACEiD,IAAG,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAAYtC,SACjBwC,KAAK,WACLC,WAAS,EACTC,kBAAkB,EAClBC,YAAY,IACZC,UAAU,SACVT,MAAM,c,GAfYT,aC9ELmB,E,uKAEjB,OACE,yBAAKvB,UAAU,QACb,kBAAC,EAAD,MACA,wBAAIA,UAAU,+BAAd,cACA,yBAAKA,UAAU,wBACb,kBAAC,EAAD,CAAeY,KAAK,OAAOC,MAAM,UAAjC,gBACA,kBAAC,EAAD,CAAeD,KAAK,SAASC,MAAM,QAAnC,WACA,kBAAC,EAAD,CAAeD,KAAK,SAASC,MAAM,QAAnC,a,GATwBT,aCGlCoB,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SL8H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.78101ee6.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  const fetch = require('isomorphic-fetch') // global fetch\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import { reducer } from './reducer'\r\n// import { createStore } from 'redux'\r\n// uncomment the function above and comment the one below\r\n// in order to use the default Redux\r\n\r\nexport function createStore (reducer, initialState) {\r\n  let state = initialState\r\n  const listeners = []\r\n\r\n  const getState = () => state\r\n\r\n  const dispatch = action => {\r\n    state = reducer(state, action)\r\n    // each action execution calls the subscribed listener\r\n    listeners.forEach(l => l())\r\n  }\r\n\r\n  const subscribe = listener => listeners.push(listener)\r\n\r\n  return {\r\n    // keys not needed: names are the same\r\n    getState,\r\n    dispatch,\r\n    subscribe\r\n  }\r\n}\r\n\r\nexport const store = createStore(reducer, { messages: [] })\r\n","export function reducer (state, action) {\r\n  // state: {messages:[]}\r\n  switch (action.type) {\r\n    case 'ADD_MESSAGE':\r\n      return {\r\n        messages: state.messages.concat(action.message) // concat does not mutate the array\r\n      }\r\n    case 'DEL_MESSAGE':\r\n      return { messages: state.messages.filter((m, i) => action.idx !== i) }\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\nimport ReactJson from 'react-json-view'\r\nimport { store } from '../redux/store'\r\n\r\nclass MessagesInput extends Component {\r\n  state = {value: ''} // eslint-disable-line\r\n\r\n  handleChange = ({ target: { value } }) => {\r\n    this.setState({ value })\r\n  }\r\n\r\n  handleSubmit = ev => {\r\n    ev.preventDefault()\r\n    if (this.state.value.length) {\r\n      store.dispatch({\r\n        type: 'ADD_MESSAGE',\r\n        message: {\r\n          author: this.props.username,\r\n          color: this.props.color,\r\n          content: this.state.value\r\n        }\r\n      })\r\n      this.setState({ value: '' })\r\n    }\r\n  }\r\n\r\n  render () {\r\n    const { username, color } = this.props\r\n    return (\r\n      <form className='ui labeled action fluid mini input' onSubmit={this.handleSubmit}>\r\n        <label className='ui label'>{username}</label>\r\n        <input\r\n          type='text' placeholder='...'\r\n          onChange={this.handleChange} value={this.state.value}\r\n        />\r\n        <button type='submit' className={'ui button mini ' + color}>\r\n          <i className='arrow alternate circle down outline icon' />\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nclass MessagesArea extends Component {\r\n  componentDidMount () {\r\n    store.subscribe(() => this.forceUpdate())\r\n  }\r\n\r\n  handleDel = (i) => {\r\n    store.dispatch({ type: 'DEL_MESSAGE', idx: i })\r\n  }\r\n\r\n  render () {\r\n    const { messages } = store.getState()\r\n    return (\r\n      <>\r\n        {messages.map((m, i) =>\r\n          <div className={'ui message ' + m.color} key={i}>\r\n            <i className='close icon' onClick={() => this.handleDel(i)} />\r\n            <div className='header'>{m.author}</div>\r\n            <p>{m.content}</p>\r\n          </div>\r\n        )}\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nclass MessagesGroup extends Component {\r\n  render () {\r\n    const { user, theme, children } = this.props\r\n    return (\r\n      <section className='ui column five wide'>\r\n        <h2>{children}</h2>\r\n        <MessagesInput username={user} color={theme} />\r\n        <MessagesArea />\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nclass MessagesLog extends Component {\r\n  componentDidMount () {\r\n    store.subscribe(() => this.forceUpdate())\r\n  }\r\n\r\n  render () {\r\n    const storeState = store.getState()\r\n    return (\r\n      <ReactJson\r\n        src={storeState?.messages}\r\n        name='Messages'\r\n        collapsed\r\n        displayDataTypes={false}\r\n        indentWidth='2'\r\n        iconStyle='circle'\r\n        theme='ocean'\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nexport {\r\n  MessagesGroup,\r\n  MessagesLog\r\n}\r\n","import React, { Component } from 'react'\r\nimport { MessagesGroup, MessagesLog } from './msgs'\r\n\r\nexport default class Chat extends Component {\r\n  render () {\r\n    return (\r\n      <div className='root'>\r\n        <MessagesLog />\r\n        <h1 className='ui dividing centered header'>Flow-chats</h1>\r\n        <div className='ui aligned page grid'>\r\n          <MessagesGroup user='Abzu' theme='violet'>Subterranean</MessagesGroup>\r\n          <MessagesGroup user='Tiamat' theme='teal'>Surface</MessagesGroup>\r\n          <MessagesGroup user='Marduk' theme='blue'>Sky</MessagesGroup>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'semantic-ui-css/semantic.min.css' // layout\nimport * as serviceWorker from './serviceWorker'\nimport Chat from './chat/chat'\n\nReactDOM.render(<Chat />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}